import { type SceneSessionData } from "@bot/helpers";
import { BOT_TOKEN } from "@configs/index";
import i18n from "@i18n/i18n";
import { getSubscriptions } from "@services/subscription.service";
import logger from "@utils/logger";
import add from "@utils/p-queue";
import { Scenes, session, Telegraf, type TelegramError } from "telegraf";

import { useRouting } from "./commands";
import { getMainKeyboard } from "./keyboards";
import historyScene from "./scenes/history";
import searchPlayerScene from "./scenes/search-player";
import subGuildScene from "./scenes/sub-guild";
import subServerScene from "./scenes/sub-server";
import unsubScene from "./scenes/unsub";

const bot = new Telegraf<Scenes.SceneContext<SceneSessionData>>(BOT_TOKEN);

const stage = new Scenes.Stage<Scenes.SceneContext<SceneSessionData>>([
  subServerScene,
  subGuildScene,
  unsubScene,
  searchPlayerScene,
  historyScene,
]);

bot.use(session());
bot.use(stage.middleware());
useRouting(bot);

bot.hears(/(.*?)/, async (ctx: Scenes.SceneContext<SceneSessionData>) => {
  logger.debugWithCtx(ctx, "Default handler has fired");
  const { mainKeyboard } = getMainKeyboard(ctx);

  add(
    async () => await ctx.reply(i18n.t("other.default_handler"), mainKeyboard),
  );
});

bot.catch((error) => {
  logger.error("Bot error has happened", error);
});

export async function launchBot(): Promise<void> {
  await bot.launch();
}

export async function sendMessage(
  chatId: number | string,
  messages: string[],
  options?: any,
  errorCb?: (error: TelegramError) => Promise<any>,
): Promise<void> {
  for (const message of messages) {
    add(
      async () => await bot.telegram.sendMessage(chatId, message, options),
      async (error) => errorCb && (await errorCb(error)),
    );
  }
}

export async function sorryMessage(): Promise<void> {
  let subs: any[] | null = await getSubscriptions();
  if (subs) {
    subs = subs.map((s: any) => s.user_id);
    const ids = new Set(subs);

    const message = `üí§ –î–æ–±—Ä–æ–π –Ω–æ—á–∏!\n\n–ü—Ä–∏–Ω–æ—à—É —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –±–æ—Ç–∞(–æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è). –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ —Å–±—Ä–æ—Å–∞ –≤–æ–µ–Ω–∫–∏ –≤ –∏–≥—Ä–µ. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤ –Ω–æ—á—å –æ–±–Ω—É–ª–µ–Ω–∏—è –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ 12 —É—Ç—Ä–∞ –ø–æ –ú–°–ö, –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏ –µ–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—â–µ–º –º–µ–Ω—é –±–æ—Ç–∞.\n\nP.S.: –ï—â–µ —Ä–∞–∑ –ø—Ä–∏–Ω–æ—à—É —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤—Å–µ—Ö –±–ª–∞–≥!\n\nP.P.S.: –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Å–ø–∞–º–µ –∏–Ω—Ñ–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è, –Ω–µ –æ–±—Ä–∞—â–∞–π—Ç–µ –Ω–∞ –Ω–µ–µ –≤–Ω–∏–º–∞–Ω–∏—è!`;

    for (const id of ids) {
      await sendMessage(id, [message], {
        parse_mode: "HTML",
        disable_notification: true,
      });
    }
  }
}
